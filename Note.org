
* URL
  domain
  https://digital-bosai.net/evacguide/index.html
  https://digital-bosai.net/evacguide/mobile.html

  elastic ip
  http://35.74.99.112/evacguide/index.html
  http://35.74.99.112/evacguide/mobile.html

  initial
  http://35.77.198.0/index.html
  http://35.77.198.0/mobile.html


* todo
** mobileの方で拡大できるように
** 軌跡を残すように
** SessionIDによって出力をし分ける
** reportは、古い順に出す
** mobile上で reportは全部出す: 設定でよい
** mobile: ボタンを右下に
** mouseoverで 人の最新の位置情報とタイムスタンプを出す
** 倍速設定も画面におく
** DONE 避難者位置のリアルタイム表示
   - テスト用の日付：2023/12/13 13:23
   - 軌跡は無しで
   - 点を表示
   - 1分過ぎたものは消す(アクティブなものだけを表示)
** DONE 人が動いた様子を後で再生できるようにする
** ------------------------------
** DONE mobileで現在地に戻るボタンを入れる
** DONE mobileで現在地を更新し続ける
** DONE ハザードマップの重畳
   地理院がタイルを共有できるようにしている
   https://disaportal.gsi.go.jp/hazardmapportal/hazardmap/copyright/opendata.html#tsunami

** DONE スマホから位置情報をもらって、現在位置を表示しつつセンタリング
   取れなかったらデフォルトの場所にする。今は福岡

** 地図画面にピンを追加
   電話で情報が来たときに情報を集約できるように
** 地図上にルートを描けるように
*** マウス
   https://leaflet.github.io/Leaflet.draw/docs/leaflet-draw-latest.html
   これを使えばできそう

   https://github.com/Leaflet/Leaflet.draw?tab=readme-ov-file
*** タブレット上のペン入力
** DONE https化する

** DONE 地図でより zoomできるようにする
** DONE 見るだけの地図サイトを用意する：mobile.html
*** DONE 最初の一回だけ読み込むようにする
    指定した時間以降のものだけを使う
*** DONE 座標をもらう
    パラメータ
    mobile.html?lat=33.58066555313628&lon=130.34224748611453
    http://localhost/~tetsu/evacguide/mobile.html?lat=33.58066555313628&lon=130.34224748611453

    藤崎駅
    mobile.html?lat=33.58128214301003&lon=130.34832000732425

** DONE open streetmapで、もっと寄れるか確認する[2023-12-19 Tue]
   最大の解像度は同じだった

** DONE ルートを画面から切り替えられるようにする

{"lon"=>0.0, "table"=>"oishi1", "application"=>"oishi1", "lat"=>-0.8e3}
{"lon"=>0.0, "table"=>"oishi2", "application"=>"oishi2", "lat"=>0.0}
---



type=$1
if [ $type -eq 2 ]; then
	aws dynamodb update-item --table-name Oishi2 --key \
    	 '{ "table": { "S": "oishi1" }, "application": { "S": "oishi1" } }' \
    	 --update-expression 'SET lat = :ok' \
    	 --expression-attribute-values '{":ok": {"N": "0"}}'
	aws dynamodb update-item --table-name Oishi2 --key \
    	 '{ "table": { "S": "oishi2" }, "application": { "S": "oishi2" } }' \
    	 --update-expression 'SET lat = :ok' \
    	 --expression-attribute-values '{":ok": {"N": "-800"}}'
else
	aws dynamodb update-item --table-name Oishi2 --key \
    	 '{ "table": { "S": "oishi2" }, "application": { "S": "oishi2" } }' \
    	 --update-expression 'SET lat = :ok' \
    	 --expression-attribute-values '{":ok": {"N": "0"}}'
	aws dynamodb update-item --table-name Oishi2 --key \
    	 '{ "table": { "S": "oishi1" }, "application": { "S": "oishi1" } }' \
    	 --update-expression 'SET lat = :ok' \
    	 --expression-attribute-values '{":ok": {"N": "-800"}}'
fi
** DONE serverから dynamoDBのデータの取得をスレッド化する。serverへのリクエストにはキャッシュしたデータで答える
** DONE ピンの削除機能

** DONE AWSDの initializeで regionを取るようにする
** DONE reportには idを持たせるようにして、すでに置かれている idの reportは置かないようにする
   updateを使えばよいか。
   updateAllInfo()をする前は、マークを消すようにする

** DONE INFOの確認
   重複していても追記できた

** DONE 地図上で座標を取る機能を追加する

** DONE evacguide.rbの DB名を configから取るようにする

** DONE 12/8までにデモを作る
** DONE データを読み込んでマークを付ける
** DONE 画面のサイズに合わせて地図のサイズを決める
** DONE 画面サイズが変更されたら地図のサイズを変える
** DONE ×を置くアクションを設定


* library
  
** leaflet-icon-pulse
   https://github.com/mapshakers/leaflet-icon-pulse

** Leaflet.EasyButton
   https://github.com/CliffCloud/Leaflet.EasyButton

* note
  sudo service apache2 status

  sudo service apache2 start


* setup
** ruby
   sudo gem install aws-sdk-dynamodb

   sudo certbot --apache certonly

* spec
** ui
*** 初期座標
    index.html内で指定

** AWS dynamoDB

*** tables
**** Oishi4: 5秒ごとの歩行データ
     {
       table (string): "Location"
       application (string): "SessionID20231213132947551"
       time (list of string)
       lat (list of string)
       lon (list of string)
     }

**** Oishi3
     {
       application (string) primary
       table (string)
       lat (float)
       lon (float)
       URL (string)
     }

**** eg_report
     {
       id (string) primary
       lat (float)
       lng (float)
       image_url (string)
       time (string) or (int)
     }

**** eg_cross
     {
       id (string) primary
       lat (float)
       lng (float)
     }

*** CLI

**** install
     sudo apt install awscli

**** configure
     ./aws configure

     AWS --> IAM --> ユーザ
     AWS Access Key ID [None]: **********        // アクセスキーID
     AWS Secret Access Key [None]: **********    // シークレットアクセスキー
     Default region name [None]: ap-northeast-1　// 接続するDynamoDBのregion name
     Default output format [None]: json          // 結果を出力するフォーマット


**** list-tables
     aws dynamodb list-tables

**** describe-table
     aws dynamodb describe-table --table-name eg_cross
     aws dynamodb describe-table --table-name eg_report

**** put-item
     aws dynamodb put-item --table-name eg_report --item '{ "id": {"S": "r1"}, "lat": {"N": "36.947511372610805"}, "lng": {"N": "140.90772628784183"}, "image_url": {"S": "https://cdn.mainichi.jp/vol1/2022/11/29/20221129k0000m040094000p/9.jpg?1"}, "time": {"S": "2023/12/07 12:59:00"} }'


     aws dynamodb put-item --table-name eg_report --item '{ "id": {"S": "r2"}, "lat": {"N": "36.94812872265479"}, "lng": {"N": "140.90515136718753"}, "image_url": {"S": "https://cdn.mainichi.jp/vol1/2022/11/29/20221129k0000m040094000p/9.jpg?1"}, "time": {"S": "2023/12/07 12:58:00"} }'

     aws dynamodb put-item --table-name eg_report --item '{ "id": {"S": "r3"}, "lat": {"N": "36.94891755154147"}, "lng": {"N": "140.90274810791018"}, "image_url": {"S": "https://cdn.mainichi.jp/vol1/2022/11/29/20221129k0000m040094000p/9.jpg?1"}, "time": {"S": "2023/12/07 12:57:00"} }'



     同じ primary keyで put-itemすると、重複するものは上書きされる



**** scan
     aws dynamodb scan --table-name eg_report


**** get-item
     aws dynamodb get-item --table-name eg_report  --key '{"user_id":{"N":"1"}}'

**** delete-item
     aws dynamodb delete-item --table-name eg_report  --key '{"key": {"S": "t0924"}}'


**** reference
     https://qiita.com/ekzemplaro/items/93c0aef433a2b633ab4a
     https://www.wakuwakubank.com/posts/675-aws-cli-dynamodb/


** server
*** endpoint
    '/'のみとし、JSONで渡された request.body内の modeによって
    処理を切り分ける

*** data type
**** report
     {
       lat (string)
       lon (string)
       image_url (string)
       time (string)
     }

**** cross
     {
       id (string)
       lat (float)
       lon (float)
     }

   * trace
     {
       application (string)
       lat (string)
       lon (string)
     }

*** mode
**** getAllInfo
     AWSからすべての reportと crossのデータを取得して返す

     return:
     {
       reports: list of report
       crosses: list of cross
     }

**** trace(string time)
     timeで指定された時間から、デフォルト値として決められた時間(TraceTimeRange)以内で
     もっとも直近の位置情報を、
     すべてのユーザ分返す

     return:
     {
       traces: list of trace
     }


**** startPolling
     サーバ上での DBへのポーリングを開始

**** stopPolling
     サーバ上での DBへのポーリングを修了


**** getUpdateReport
     最後に取得したデータの後に追加されたデータを返す
     (それぞれの接続元がいつデータを取得したかが分からないため、どこまでが最後かをサーバは分からない。そのためこれは使えない。常にすべてのデータを渡してクライアント側で判断してもらう。)


     return:
     list of report

**** putCross
     userInput["lat"]
     userInput["lng"]

     クロスマークの情報を AWSにアップロードする

     return:
     cross_id
     html (セットしたクロスマークを表示するテーブル)

**** removeCross
     userInput["cross_id"]

     指定されたクロスマークの情報を AWSから削除する

     return:
     html (セットしたクロスマークを表示するテーブル)
    
*** 設定
    config.rbで以下を指定
    - ログファイル
    - ポート番号


** client


* function


* reference
  
** 地図の表示には leafletを使う
   https://leafletjs.com/

   https://ktgis.net/service/leafletlearn/index.html

** DB
   DBには AWS dynamoDBを使う

** location
   https://blog.codecamp.jp/javascript-geolocation
** AR.js
   https://ar-js-org.github.io/AR.js-Docs/




* Setting
# ============================================================ #
#+SEQ_TODO: TODO GOING WAITING PENDING DONE
#+STARTUP: overview
#+TAGS: OFFICE(o) CODING(c) RESEARCH(r) MAIL(m) THINK(t)
#+STARTUP: hidestars
#+OPTIONS:  num:2 H:5 toc:f TeX:f
#+LaTeX_CLASS: jarticle
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css">
# ============================================================ #
   
* end

