
* todo
** report
・すでに表示されているピンは追加で表示しない
・サーバでは 2秒おきに dynamodbから情報を取得し、地図はサーバから毎秒情報を取得 (複数ユーザの同時利用に対応)
・ルート選択のボタンを追加。選択後に "send route"を押すと Oishi2が更新される

** DONE ルートを画面から切り替えられるようにする

{"lon"=>0.0, "table"=>"oishi1", "application"=>"oishi1", "lat"=>-0.8e3}
{"lon"=>0.0, "table"=>"oishi2", "application"=>"oishi2", "lat"=>0.0}
---



type=$1
if [ $type -eq 2 ]; then
	aws dynamodb update-item --table-name Oishi2 --key \
    	 '{ "table": { "S": "oishi1" }, "application": { "S": "oishi1" } }' \
    	 --update-expression 'SET lat = :ok' \
    	 --expression-attribute-values '{":ok": {"N": "0"}}'
	aws dynamodb update-item --table-name Oishi2 --key \
    	 '{ "table": { "S": "oishi2" }, "application": { "S": "oishi2" } }' \
    	 --update-expression 'SET lat = :ok' \
    	 --expression-attribute-values '{":ok": {"N": "-800"}}'
else
	aws dynamodb update-item --table-name Oishi2 --key \
    	 '{ "table": { "S": "oishi2" }, "application": { "S": "oishi2" } }' \
    	 --update-expression 'SET lat = :ok' \
    	 --expression-attribute-values '{":ok": {"N": "0"}}'
	aws dynamodb update-item --table-name Oishi2 --key \
    	 '{ "table": { "S": "oishi1" }, "application": { "S": "oishi1" } }' \
    	 --update-expression 'SET lat = :ok' \
    	 --expression-attribute-values '{":ok": {"N": "-800"}}'
fi
** mobile用の画面
** DONE serverから dynamoDBのデータの取得をスレッド化する。serverへのリクエストにはキャッシュしたデータで答える
** DONE ピンの削除機能

** DONE AWSDの initializeで regionを取るようにする
** DONE reportには idを持たせるようにして、すでに置かれている idの reportは置かないようにする
   updateを使えばよいか。
   updateAllInfo()をする前は、マークを消すようにする

** DONE INFOの確認
   重複していても追記できた

** DONE 地図上で座標を取る機能を追加する

** DONE evacguide.rbの DB名を configから取るようにする

** DONE 12/8までにデモを作る
** DONE データを読み込んでマークを付ける
** DONE 画面のサイズに合わせて地図のサイズを決める
** DONE 画面サイズが変更されたら地図のサイズを変える
** DONE ×を置くアクションを設定

* note
  sudo service apache2 status

    sudo service apache2 start


* setup
** ruby
   sudo gem install aws-sdk-dynamodb


* spec
** ui
*** 初期座標
    index.html内で指定

** AWS dynamoDB

*** tables
**** Oishi3
     {
       application (string) primary
       table (string)
       lat (float)
       lon (float)
       URL (string)
     }

**** eg_report
     {
       id (string) primary
       lat (float)
       lng (float)
       image_url (string)
       time (string) or (int)
     }

**** eg_cross
     {
       id (string) primary
       lat (float)
       lng (float)
     }

*** CLI

**** install
     sudo apt install awscli

**** configure
     ./aws configure

     AWS --> IAM --> ユーザ
     AWS Access Key ID [None]: **********        // アクセスキーID
     AWS Secret Access Key [None]: **********    // シークレットアクセスキー
     Default region name [None]: ap-northeast-1　// 接続するDynamoDBのregion name
     Default output format [None]: json          // 結果を出力するフォーマット


**** list-tables
     aws dynamodb list-tables

**** describe-table
     aws dynamodb describe-table --table-name eg_cross
     aws dynamodb describe-table --table-name eg_report

**** put-item
     aws dynamodb put-item --table-name eg_report --item '{ "id": {"S": "r1"}, "lat": {"N": "36.947511372610805"}, "lng": {"N": "140.90772628784183"}, "image_url": {"S": "https://cdn.mainichi.jp/vol1/2022/11/29/20221129k0000m040094000p/9.jpg?1"}, "time": {"S": "2023/12/07 12:59:00"} }'


     aws dynamodb put-item --table-name eg_report --item '{ "id": {"S": "r2"}, "lat": {"N": "36.94812872265479"}, "lng": {"N": "140.90515136718753"}, "image_url": {"S": "https://cdn.mainichi.jp/vol1/2022/11/29/20221129k0000m040094000p/9.jpg?1"}, "time": {"S": "2023/12/07 12:58:00"} }'

     aws dynamodb put-item --table-name eg_report --item '{ "id": {"S": "r3"}, "lat": {"N": "36.94891755154147"}, "lng": {"N": "140.90274810791018"}, "image_url": {"S": "https://cdn.mainichi.jp/vol1/2022/11/29/20221129k0000m040094000p/9.jpg?1"}, "time": {"S": "2023/12/07 12:57:00"} }'



     同じ primary keyで put-itemすると、重複するものは上書きされる



**** scan
     aws dynamodb scan --table-name eg_report


**** get-item
     aws dynamodb get-item --table-name eg_report  --key '{"user_id":{"N":"1"}}'

**** delete-item
     aws dynamodb delete-item --table-name eg_report  --key '{"key": {"S": "t0924"}}'


**** reference
     https://qiita.com/ekzemplaro/items/93c0aef433a2b633ab4a
     https://www.wakuwakubank.com/posts/675-aws-cli-dynamodb/


** server
*** endpoint
    '/'のみとし、JSONで渡された request.body内の modeによって
    処理を切り分ける

*** data type
**** report
     {
       lat (float)
       lng (float)
       image_url (string)
       time (string)
     }

**** cross
     {
       id (string)
       lat (float)
       lng (float)
     }

*** mode
**** getAllInfo
     AWSからすべての reportと crossのデータを取得して返す

     return:
     {
       reports: list of report
       crosses: list of cross
     }

**** getUpdateReport
     最後に取得したデータの後に追加されたデータを返す

     return:
     list of report

**** putCross
     userInput["lat"]
     userInput["lng"]

     クロスマークの情報を AWSにアップロードする

     return:
     cross_id
     html (セットしたクロスマークを表示するテーブル)

**** removeCross
     userInput["cross_id"]

     指定されたクロスマークの情報を AWSから削除する

     return:
     html (セットしたクロスマークを表示するテーブル)
    
*** 設定
    config.rbで以下を指定
    - ログファイル
    - ポート番号


** client

* function
  

* reference
  
** 地図の表示には leafletを使う
   https://leafletjs.com/

   https://ktgis.net/service/leafletlearn/index.html

** DB
   DBには AWS dynamoDBを使う

** location
   https://blog.codecamp.jp/javascript-geolocation
** AR.js
   https://ar-js-org.github.io/AR.js-Docs/




* Setting
# ============================================================ #
#+SEQ_TODO: TODO GOING WAITING PENDING DONE
#+STARTUP: overview
#+TAGS: OFFICE(o) CODING(c) RESEARCH(r) MAIL(m) THINK(t)
#+STARTUP: hidestars
#+OPTIONS:  num:2 H:5 toc:f TeX:f
#+LaTeX_CLASS: jarticle
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css">
# ============================================================ #
   
* end

